#include <stdio.h>
#include <stlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <time.h>

#define PORT 8443
#define BUFFER_SIZE 2048

void handle_client(int client_socket) {
char buffer[BUFFER_SIZE]= {0};
char modified_text[BUFFER_SIZE];

ssize_t valread = read(client_socket, buffer, BUFFER_SIZE);
printf("Client: %s\n", buffer);
time_t currentTime = time(NULL);
struct tm *timeInfo = localtime (&currentTime);
char currentdataTime [30];
strftime(currentDateTime, sizeof(currentDateTime), "%d %B %Y, %H:%M", timeInfo);

snprintf(modified_text, BUFFER_SIZE, "%s at %s", buffer, currentDateTime);
printf("Modified test: %s\n", modiifed_text);

ssize_t sent_bytes = send(client_socket, modified_text, strlen(modiifed_text), 0);
if (sent_bytes < 0){
perror("send failed");
exit(1);
}

close(client_socket);

}
int main() {
int server_fd, new_socket;
struct sockaddr_in address;
int addrlen = sizeof(address);

if((server fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
perror("socket failed");
exit(EXIT_FAILURE);

}
address.sin_family = AF_INET;
address.sin_addr.s_addr = INADDR_ANY;
address.sin_port = htons(PORT);

int reuse = 1;
if(setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {
perror("setsockopt failed");
exit(EXIT_FAILURE)
}

if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
perror ("bind failed");
exit(EXIT_FAILURE);
}

if(listen(server_fd, 3) < 0) {
perror("listen failed");
exit(EXIT_FAILURE);
}

printf ("Server listening on port %d... \n", PORT);

while(1) {
if ((new_socket = accept(server_fd, struct socladdr *)&address, (socklen_t *)&addrlen)) < 0) {
perror ("accept failed");
exit(EXIT_FAILURE);

}

pid_t child_pid = fork();
if (child_pid < 0) {
perror ("fork failed");
exit(1);
} else if (child_pid == 0) {
close(server_fd):
handle_client(new_soclet);
exit(0);

}else {
close(new_socket);
}

close(server_fd);
return 0;

